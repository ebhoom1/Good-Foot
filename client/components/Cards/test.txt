{/* <View style={styles.sectionContainer}>
        <View style={styles.header}>
          <Text style={styles.headerText}>Recent Products</Text>
        </View>
        <View style={styles.contentBox}>
          <Text style={styles.contentText}>You have not tracked anything yet!</Text>
          <TouchableOpacity style={styles.button}>
            <Text style={styles.buttonText}>Track Food</Text>
          </TouchableOpacity>
        </View>
      </View> */}



      {/* <View style={styles.trendBox}>
          <View style={styles.trendHeader}>
            <Text style={styles.trendLabel}>Weekly Goals</Text>
            <FontAwesome5 name="info-circle" size={16} color="#34495e" />
          </View>
          <Text style={styles.trendSubtitle}>Last 7 days</Text>
          <Text style={styles.trendValue}>0/7</Text>
          <Text style={styles.trendSubtitle}>Achieved</Text>
          <View style={styles.trendCircles}>
            {weeklyGoals.map((value, index) => (
              <Svg height="30" width="30" key={index}>
                <G rotation="-90" origin="15, 15">
                  <Circle
                    cx="15"
                    cy="15"
                    r="13"
                    stroke="#bdc3c7"
                    strokeWidth="2"
                    fill="none"
                  />
                  <Circle
                    cx="15"
                    cy="15"
                    r="13"
                    stroke="#10ac84"
                    strokeWidth="2"
                    fill="none"
                    strokeDasharray={`${(value * 2 * Math.PI * 13) / 100}, ${
                      2 * Math.PI * 13
                    }`}
                  />
                  <SvgText
                    x="15"
                    y="18"
                    fontSize="12"
                    fill="black"
                    textAnchor="middle"
                    alignmentBaseline="middle"
                  >
                    {value}%
                  </SvgText>
                </G>
              </Svg>
            ))}
          </View>
          <View style={styles.trendDays}>
            <Text style={styles.trendDay}>M</Text>
            <Text style={styles.trendDay}>T</Text>
            <Text style={styles.trendDay}>W</Text>
            <Text style={styles.trendDay}>T</Text>
            <Text style={styles.trendDay}>F</Text>
            <Text style={styles.trendDay}>S</Text>
            <Text style={styles.trendDay}>S</Text>
          </View>
        </View> */}




        import React, { useCallback, useEffect, useState } from 'react';
import { View, Text, StyleSheet, Dimensions, Alert } from 'react-native';
import { FontAwesome5 } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import AchievementsRecentProducts from '../Cards/AchievementsRecentProducts';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';

const screenWidth = Dimensions.get('window').width;

const SecondSection = ({ dailyEmissions = [0.9, 0.5, 0.3, 0.6, 0.2, 0.9, 0.8], weeklyGoals = [100, 50, 20, 85, 15, 10, 0] }) => {
  const navigation = useNavigation(); // Hook to access the navigation prop
  const [totalPoints, setTotalPoints] = useState(null); // For total points
  const [totalCarbonEmissions, setTotalCarbonEmissions] = useState(null); // For total carbon emissions
  const [monthlyEmissions, setMonthlyEmissions] = useState([]); // For monthly emissions

  // Fetch user data including totalPoints and totalCarbonEmissions
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = await AsyncStorage.getItem('userToken');
        if (token) {
          const config = {
            headers: { Authorization: `Bearer ${token}` }
          };
          const response = await axios.get('http://192.168.20.3:4444/api/users/me', config);
          const userData = response.data.user;

          // Set totalPoints and totalCarbonEmissions from the response
          setTotalPoints(userData.totalPoints || 'N/A'); // Default to 'N/A' if no data
          setTotalCarbonEmissions(userData.carbonFootprint.totalCO2Emissions || 0); // Default to 0 if no data
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        Alert.alert('Error', 'Unable to fetch user data.');
      }
    };

    const fetchMonthlyEmissions = async () => {
      try {
        const userId = await AsyncStorage.getItem('userId');
        if (userId) {
          const response = await axios.get(`http://192.168.20.3:4444/api/carbon-engine-month/get/${userId}`);
          // Ensure the response is an array
          setMonthlyEmissions(Array.isArray(response.data) ? response.data : []);
        }
      } catch (error) {
        console.error('Error fetching monthly emissions:', error);
        Alert.alert('Error', 'Unable to fetch monthly emission data.');
      }
    };

    fetchUserData();
    fetchMonthlyEmissions();
  }, []);

  // Navigation handlers
  const handleNavigateMonthlyCalculator = useCallback(() => {
    navigation.navigate('MonthlyCalculator');
  }, [navigation]);

  const handleNavigateOffset = useCallback(() => {
    navigation.navigate('MonthlyCalculator');
  }, [navigation]);

  // Helper to generate trend chart based on monthly emissions data
  const renderTrendBars = () => {
    if (!Array.isArray(monthlyEmissions) || monthlyEmissions.length === 0) {
      return <Text style={styles.trendValue}>No data available</Text>;
    }

    return monthlyEmissions.map((monthData, index) => (
      <View
        key={index}
        style={[styles.trendBar, { height: (monthData.totalCO2Emissions / 1000) * 50 }]} // Example height calculation
      ></View>
    ));
  };

  return (
    <View style={styles.container}>
      <AchievementsRecentProducts
        title="Monthly Carbon Footprint"
        description="Calculate your monthly carbon emission here."
        buttonText="Find"
        onButtonPress={handleNavigateMonthlyCalculator}
      />
      <LinearGradient
        colors={['#1dd1a1', '#10ac84']}
        style={styles.leaderboard}
      >
        <View style={styles.leaderboardTextContainer}>
          <Text style={styles.leaderboardText}>Leaderboard</Text>
          <Text style={styles.leaderboardPlace}>10451th place</Text>
          <Text style={styles.leaderboardPoints}>You have earned 0 pts</Text>
        </View>
        <View style={styles.leaderboardAvatarContainer}>
          <View style={styles.leaderboardAvatar}>
            <Text style={styles.avatarText}>MF</Text>
          </View>
          <View style={styles.leaderboardAvatarOverlap}>
            <Text style={styles.avatarOverlapText}>104...</Text>
          </View>
        </View>
      </LinearGradient>

      <View style={styles.highlightsHeader}>
        <Text style={styles.highlightsText}>Highlights</Text>
        <Text style={styles.highlightsMore}>See more</Text>
      </View>

      <View style={styles.highlights}>
        <View style={styles.highlightBox}>
          <View style={styles.highlightHeader}>
            <Text style={styles.highlightLabel}>Total Score</Text>
            <FontAwesome5 name="question-circle" size={16} color="#34495e" />
          </View>
          <Text style={styles.highlightValue}>
            {totalPoints} <FontAwesome5 name="coins" size={16} color="black" />
          </Text>
        </View>

        <View style={styles.highlightBox}>
          <View style={styles.highlightHeader}>
            <Text style={styles.highlightLabel}>CO2e Tracked</Text>
            <FontAwesome5 name="question-circle" size={16} color="#34495e" />
          </View>
          <Text style={styles.highlightValue}>
            {totalCarbonEmissions} kg <FontAwesome5 name="globe" size={16} color="black" />
          </Text>
        </View>
      </View>

      <View style={styles.trendsHeader}>
        <Text style={styles.trendsText}>Trends</Text>
        <Text style={styles.trendsMore}>What's this?</Text>
      </View>
      <View style={styles.trends}>
        <View style={styles.trendBox}>
          <View style={styles.trendHeader}>
            <Text style={styles.trendLabel}>Month Emission</Text>
            <FontAwesome5 name="info-circle" size={16} color="#34495e" />
          </View>
          <Text style={styles.trendSubtitle}>Last 12 months</Text>
          <Text style={styles.trendValue}>Avg CO2e</Text>
          <View style={styles.trendChart}>
            {renderTrendBars()}
          </View>
          <View style={styles.trendDays}>
            <Text style={styles.trendDay}>M</Text>
            <Text style={styles.trendDay}>T</Text>
            <Text style={styles.trendDay}>W</Text>
            <Text style={styles.trendDay}>T</Text>
            <Text style={styles.trendDay}>F</Text>
            <Text style={styles.trendDay}>S</Text>
            <Text style={styles.trendDay}>S</Text>
          </View>
        </View>
      </View>

      <AchievementsRecentProducts
        title="Track Your Achievements"
        description="View your recent achievements and carbon reduction projects."
        buttonText="View Projects"
        onButtonPress={handleNavigateOffset} // Custom navigation
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    borderTopRightRadius: 50,
    borderBottomLeftRadius: 50,
  },
  leaderboard: {
    borderRadius: 10,
    padding: 15,
    marginTop: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  leaderboardTextContainer: {
    flex: 1,
  },
  leaderboardText: {
    color: 'white',
    fontSize: 16,
  },
  leaderboardPlace: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
  },
  leaderboardPoints: {
    color: 'white',
    fontSize: 14,
  },
  leaderboardAvatarContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  leaderboardAvatar: {
    backgroundColor: 'black',
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  avatarText: {
    color: 'white',
    fontSize: 16,
  },
  leaderboardAvatarOverlap: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: -20,
  },
  avatarOverlapText: {
    color: 'white',
    fontSize: 16,
  },
  highlightsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 20,
  },
  highlightsText: {
    color: 'black',
    fontSize: 20,
    fontWeight: 'bold',
  },
  highlightsMore: {
    color: '#1e90ff',
    fontSize: 16,
  },
  highlights: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  highlightBox: {
    backgroundColor: '#f4f4f4',
    borderRadius: 10,
    padding: 15,
    width: '48%',
    alignItems: 'center',
    marginBottom: 10,
  },
  highlightHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  highlightValue: {
    color: 'black',
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 10,
    textAlign: 'center',
  },
  trendChart: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-end',
    marginTop: 10,
    height: 50,
  },
  trendBar: {
    width: 20,
    backgroundColor: '#b4babd',
    borderRadius: 5,
  },
  trendDays: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  trendDay: {
    color: '#34495e',
    fontSize: 14,
    width: 20,
    textAlign: 'center',
  },
  trendBox: {
    backgroundColor: '#f4f4f4',
    borderRadius: 10,
    padding: 15,
    marginBottom: 20,
  }
});

export default SecondSection;
